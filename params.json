{
  "name": "Gumshoe",
  "tagline": "",
  "body": "\r\nGumshoe Load Investigator \r\n=========================\r\n\r\nOverview\r\n--------\r\n\r\nMonitor application performance statistics associated with individual calling stacks,\r\ninteractively filter and view as a flame graph or root graph.\r\n\r\nGumshoe was first created initially for internal use in the Dell Cloud Manager application but\r\nsource code has since been released for public use under [these terms](COPYRIGHT).  \r\n\r\n[Features](docs/features.md)\r\n--------\r\n\r\n* Analyze resource usage: measure TCP, UDP, filesystem or processor utilization\r\n* Pinpoint lines of code: all statistics are associated with a call stack and individual stack frames\r\n* Capture, filter and visualize as statistics are generated\r\n* Intuitive views: flame graph and root graph\r\n* Filter stack frames at capture and/or during visualization, modify on the fly. \r\n\r\nDocumentation\r\n-------------\r\n\r\n* Short intro and demo on youtube: [latest](https://www.youtube.com/watch?v=GGJFZfwXJ44) or the original [boring version](https://www.youtube.com/watch?v=1M9GX4ENMeI).\r\n* [Quick start guide](docs/QUICK-START.md) walks through using with a sample application.\r\n* Full [user guide](docs/index.md)\r\n\r\nDon't Just Measure and Report:  Understand\r\n------------------------------------------\r\n\r\nLooking at stack traces scaled by metrics gives a fast, intuitive way to understand application resource usage.  Consider\r\nnetwork I/O in a hypothetical application...\r\n\r\nFlame graph example:\r\n\r\n![image](docs/flame-graph.png)\r\n\r\nLooking at callers into an application, Invoker.invoke is responsible for >90% of the read operations\r\nin this application.  It always calls RestRequestHandler.handle which in turn calls three different REST\r\noperations.  One -- showItemDetails -- is responsible for >80% of read operations as it makes different calls\r\ninto the DAO layer.\r\n\r\nRoot graph example:\r\n\r\n![image](docs/root-graph.png)\r\n\r\nGrouping now by the last frame where the application calls out to a resource,\r\nthe couchdb Database.getDocument is responsible for over half of the read operations,\r\nwhile the JDBC Statement.execute about 25%, the vast majority of those from getItemDetails.\r\n\r\nThese two examples are completely contrived, but not overly simplified.  The original call stacks in\r\nyour application are generally huge, with hundreds of frames,\r\nbut gumshoe uses [stack filters](docs/filters.md) to find\r\njust the relevant portions and focus the view on just those parts.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
